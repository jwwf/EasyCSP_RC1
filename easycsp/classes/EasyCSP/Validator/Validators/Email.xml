<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-27 08:31:18">
<Class name="EasyCSP.Validator.Validators.Email">
<Description><![CDATA[
  <p>Copyright (c) 2011 James W "Bill" Westley-Farrell</p>

  <p>Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at</p>

      <p><a href=http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>

  <p>Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.</p>]]></Description>
<Language>mvbasic</Language>
<Super>EasyCSP.Validator.Base</Super>
<TimeChanged>64126,49421.649808</TimeChanged>
<TimeCreated>63459,75965.185229</TimeCreated>

<Parameter name="message">
<Default>The value must be a valid email address (person@place.dom).</Default>
</Parameter>

<Method name="run">
<ClassMethod>1</ClassMethod>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>EasyCSP.Model.attribute</ReturnType>
<Implementation><![CDATA[
    attribute = @ME->init(parameters)
    
    value = attribute->value
    if value = "" then return attribute ; * use "Required" to sense presence of data
    
    * If a formatted name is included with the address, only examine the RFC address portion
    if value matches "0X'<'1X0X'>'" then
        testvalue = field(value, "<", 2)
        convert ">" to "" in testvalue
    end else
        testvalue = value
    end
    
    if $get(testvalue) = "" then 
        attribute->addError(@ME->%ClassName() : ": " : value : " value must be a valid email address (person@place.dom).")
        return attribute
    end
    
    if index(testvalue, "@", 1) = 0 then
        attribute->addError(@ME->%ClassName() : ": " : value : " value must be a valid email address (person@place.dom).")
        return attribute
    end
    
    convert "@" to @am in testvalue ; * split the string and evaluate each side
    
    if dcount( testvalue, @am ) > 2 then
        attribute->addError(@ME->%ClassName() : ": " : value : " value must be a valid email address (person@place.dom) with only one @-symbol.")
        return attribute
    end ; * there can only be one @-symbol in an email address
    
    if testvalue< 1 > = '' then
        attribute->addError(@ME->%ClassName() : ": " : value : " value must be a valid email address (person@place.dom). The addressee is missing.")
        return attribute
    end ; * there has to be a person at the domain
    
    domain = convert('.', @am, testvalue<2>) ; * split the domain up
    
    domainParts = dcount(domain,@am)
    if domainParts < 2 then
        attribute->addError(@ME->%ClassName() : ": " : value : " value must be a valid email address (person@place.dom). It must include a domain.")
        return attribute
    end ; * at least something.something
    
    if not(domain<domainParts> matches "2A":@vm:"3A") then
        attribute->addError(@ME->%ClassName() : ": " : value : " value must be a valid email address (person@place.dom). The domain appears invalid.")
        return attribute
    end ; * .com, .co, .net, .uk or some such
    
    return attribute
]]></Implementation>
</Method>
</Class>
</Export>
