<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-27 08:28:12">
<Class name="EasyCSP.Validator.Validators.Password">
<Description><![CDATA[
<p>
Check a password for strength. Updated 2016-07-25 to OWASP recommendations.
Obviously, your topology may differ. If this validator does not meet your
current topology, create a new validator in your Validator.Validators package
and modify it to match your requirements.
</p>
<p>In order to comply more closely with the recommendations, errors are allowed
to fall through and accumulate. The former mechanism only allowed one error message
to be returned. The recommendations indicate that the return should tell a user
<i>everything</i> that's wrong with the password at once so they can get it
right on the second go.
</p>

  <p>Copyright (c) 2011 James W "Bill" Westley-Farrell</p>

  <p>Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at</p>

      <p><a href=http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>

  <p>Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.</p>]]></Description>
<Language>mvbasic</Language>
<Super>EasyCSP.Validator.Base</Super>
<TimeChanged>64147,43359.65045</TimeChanged>
<TimeCreated>63459,77456.807683</TimeCreated>

<Method name="run">
<ClassMethod>1</ClassMethod>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>EasyCSP.Model.attribute</ReturnType>
<Implementation><![CDATA[
    attribute = @ME->init(parameters)
    if attribute->hasErrors() then return attribute

    value = attribute->value
    
    if value = "" then return attribute ; * use "Required" to test for presence.

    if $get(value) = "" then return @false ; * it can't be empty
    
    if len(value) < 15 then return @false ; * it has to be at least eight characters long
    if len(value) > 128 then return @false ; * it can be no more than 128 characters long.
        
    allCaps = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    allLowers = "abcdefghijklmnopqrstuvwxyz"
    dingbats = "`~!@#$%^&*()_-+=[]{}\|;:/?.>,<" : '"'
        
    alphaTest = oconv(value, "MCA") ; * leave only the alphas
    if alphaTest = "" then 
        attribute->addError("There has to be at least one alphabetic character (A..Z, a..z) in the password.")
    end
        
    if alphaTest = value then
        attribute->addError("There has to be at least one numeric (and possibly a dingbat) in the password.")
    end
        
    numTest = oconv(value, "MCN") ; * leave only the numbers
    if numTest = "" then
        attribute->addError("There has to be at least one numeric character in the password.")
    end
    
    if numTest = value then
        attribute->addError("There has to be at least one alpha (and possibly a dingbat) in the password.")
    end
        
    hasCaps = convert(allCaps, '', value); * filter out the caps
    if len(value) = len(hasCaps) then
        attribute->addError("There has to be at least one capital letter.")
    end
        
    hasLowers = convert(allLowers, '', value) ; * filter out the lowercase letters
    if len(value) = len(allLowers) then
        attribute->addError("There has to be at least one lower case letter.")
    end
        
    hasDingbats = convert(dingbats, '', value)
    if len(value) = len(hasDingbats) then
        attribute->addError("There should be at least one symbol character.")
    end
        
    return attribute
]]></Implementation>
</Method>
</Class>
</Export>
