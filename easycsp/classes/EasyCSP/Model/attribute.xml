<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-26 15:38:37">
<Class name="EasyCSP.Model.attribute">
<Description><![CDATA[
<p>
This is the descriptor class for model attributes. When a model is instantiated
the %OnNew searches for persistent properties. It instantiates an attribute descriptor
for each. These descriptors hold not only classic Cache property information but also
carry rules for validation, labels for display or reporting, and other information
that will be useful labour-savers in apps.
</p>

  <p>Copyright (c) 2011 James W "Bill" Westley-Farrell</p>

  <p>Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at</p>

      <p><a href=http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>

  <p>Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.</p>]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64148,33635.034598</TimeChanged>
<TimeCreated>63473,71652.796917</TimeCreated>

<Property name="clientValidations">
<Description>
Along with display traits, inform the generator when it needs to
add JQuery validation to a field.</Description>
<Type>EasyCSP.Core.HashArray</Type>
</Property>

<Property name="collection">
<Description>
Collection type is the only way you can tell from the back side
if a multivalue attribute (global node or SQL column, depending
on which view is used) is multivalued (DICT descriptor value 6
is "M"). These are treated differently than regular strings in 
the Cache database. The framework has to know when to serialize
and deserialize values between an attribute, display, and storage</Description>
<Type>%String</Type>
</Property>

<Property name="conversions">
<Description>
MV conversions (See OCONV). Successive conversions occupy a new slot
in the array. The rule is exactly the same as MV and may be applied
to any model regardless of whether it is MV.</Description>
<Type>EasyCSP.Core.Array</Type>
<Final>1</Final>
<Transient>1</Transient>
</Property>

<Property name="converters">
<Description>
Conversions done by plugins. The plugins reside in the Conversions
subpackage folder. As with any plugin, when a conversion class is
compiled into the Conversions subpackage it becomes immediately 
available for use.</Description>
<Type>EasyCSP.Core.Array</Type>
<Final>1</Final>
<Transient>1</Transient>
</Property>

<Property name="displayTraits">
<Description>
Conversions, display/nodisplay, input types for screen building, etc.
For example, to prevent an attribute value or a control group from being
display do model.displayTraits.set("nodisplay", 1)</Description>
<Type>EasyCSP.Core.HashArray</Type>
<Final>1</Final>
<Transient>1</Transient>
</Property>

<Property name="errors">
<Description>
Validation errors are added to this array. There is a call that
will check this array (Model.hasErrors()). There is no need to
search the array "by hand". This is the property the page-builder
uses to automatically generate error text.</Description>
<Type>EasyCSP.Core.Array</Type>
<Final>1</Final>
<Transient>1</Transient>
</Property>

<Property name="fkValues">
<Description>
Foreign-key values for select boxes, a list of acceptable values
can be placed here. This could be produced with a select/readnext
in the model. For instance, to make a select box or to validate
whether an input value resides in the list of acceptable values
select/loop/readnext key-value pairs. As an example, to associate a user
with groups, select id,description from groups where... then
populate this array by attribute.fkValues.set(id, description)</Description>
<Type>EasyCSP.Core.HashArray</Type>
</Property>

<Property name="isPK">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="justification">
<Description>
The Pick-style justification attribute.</Description>
<Type>%String</Type>
<Final>1</Final>
<InitialExpression>"L"</InitialExpression>
<Transient>1</Transient>
</Property>

<Property name="keyOf">
<Description>
The property value is a key in the named file</Description>
<Type>%String</Type>
</Property>

<Property name="label">
<Description>
When a model is instantiated, a label for each attribute (or column)
will be automatically generated. Labels can be overridden at any time.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="65535"/>
</Property>

<Method name="labelGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if $get(i%label) '= "" quit i%label
    quit $MVOCONV(..name, "MCT")
]]></Implementation>
</Method>

<Property name="mvParameters">
<Description>
The class definition carries a lot of information about how
the system should deal with multivalue/Pick attributes.</Description>
<Type>%Collection.ListOfDT</Type>
</Property>

<Property name="name">
<Description>
The name of the attribute as it appears in the class. This may differ in
form from the normalized "finder" name.</Description>
<Type>%String</Type>
</Property>

<Property name="odbcType">
<Type>%Integer</Type>
<InitialExpression>12</InitialExpression>
</Property>

<Property name="order">
<Type>%Integer</Type>
</Property>

<Property name="readOnly">
<Description>
Mark this attribute is read-only. If the SQL table column is read-only
then this will be set TRUE automatically.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="required">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="sqlFieldName">
<Type>%String</Type>
</Property>

<Property name="sqlMetadata">
<Type>%SQL.StatementColumn</Type>
</Property>

<Property name="searchable">
<Description>
Set this property to FALSE (0) to prevent searches from being performed
using values in this attribute.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="sequenceNumber">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="tooltip">
<Description>
HTML is allowed. This text will appear on a web form as a tooltip.</Description>
<Type>%String</Type>
</Property>

<Property name="type">
<Type>%String</Type>
</Property>

<Property name="unique">
<Description>
Mark this attribute as being table-unique. If the SQL table column is
marked "unique" then the "isUnique" validator will be added automatically.
This allows the framework to catch errors before attempting to commit a
record to the database, thus avoiding SQL errors for uniqueness.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="validators">
<Type>EasyCSP.Core.Array</Type>
</Property>

<Property name="value">
<Type>%CacheString</Type>
</Property>

<Method name="valueGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[    Quit $get(i%value)
]]></Implementation>
</Method>

<Property name="valueList">
<Description>
For select boxes, a list of existing values from a
dynamic array can be placed here. The default display
for a non-validated valueList vs a name-value fkValues list
is a textarea.</Description>
<Type>EasyCSP.Core.Array</Type>
</Property>

<Property name="values">
<Description>
If the attribute is multivalued then the individual values are copied here</Description>
<Type>EasyCSP.Core.HashArray</Type>
</Property>

<Property name="width">
<Type>%Integer</Type>
<InitialExpression>65</InitialExpression>
</Property>

<Method name="%OnNew">
<Description>
Initialize storage arrays</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ..clientValidations = ##class(EasyCSP.Core.HashArray).%New()
    set ..conversions = ##class(EasyCSP.Core.Array).%New()
    set ..converters = ##class(EasyCSP.Core.Array).%New()
    set ..errors = ##class(EasyCSP.Core.Array).%New()
    set ..displayTraits = ##class(EasyCSP.Core.HashArray).%New()
    set ..fkValues = ##class(EasyCSP.Core.HashArray).%New()
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
    set ..validators = ##class(EasyCSP.Core.Array).%New()
    set ..valueList = ##class(EasyCSP.Core.Array).%New()
    
    // The model metadata gatherer won't use parameters since its job is fully
    // automated. In case the programmer wants to create an attribute out of
    // wholecloth, allow some presets and conditioning to be passed in for use.
    set ..label = parameters.get("label")
    set ..name = parameters.get("name")
    set ..order = parameters.get("order")
    set ..readOnly = parameters.get("readonly")
    set ..required = +parameters.get("required")
    set ..searchable = +parameters.get("searchable")
    set ..tooltip = parameters.get("tooltip")
    set ..type = parameters.get("type")
    set:..type="" ..type = "%String"
    set ..unique = +parameters.get("unique")
    set ..width = +parameters.get("width")
    set:..width=0 ..width=25
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="addError">
<FormalSpec>message:%String=""</FormalSpec>
<Implementation><![CDATA[    do:$get(message)'="" ..errors.append(message)
]]></Implementation>
</Method>

<Method name="addValidator">
<FormalSpec>rule:%String="",scenario:%String="save",parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    quit:$get(rule)="" 0
    set:$get(scenario)="" scenario = "save"
    quit:..validators.isDefined(rule) 1
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
    
    set ruleObject = ##class(EasyCSP.Validator.Rule).%New(rule, scenario, parameters)
    
    if '$IsObject(ruleObject) {
        do ..addError("Validation "_rule_" can not be located.")
        quit 0
    }

    do ..validators.append(ruleObject)
    
    quit 1
]]></Implementation>
</Method>

<Method name="clearErrors">
<Implementation><![CDATA[    set ..errors = ##class(EasyCSP.Core.Array).%New()
]]></Implementation>
</Method>

<Method name="hasConversion">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit (..conversions.length()>0)
]]></Implementation>
</Method>

<Method name="hasConverter">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit (..converters.length()>0)
]]></Implementation>
</Method>

<Method name="hasErrors">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit (..errors.length()>0)
]]></Implementation>
</Method>

<Method name="hasValidator">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit (..validators.length()>0)
]]></Implementation>
</Method>

<Method name="errorsToStream">
<Language>cache</Language>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
    set rtn = ##class(%GlobalCharacterStream).%New()
    set idx = ..errors.Next("")
    while idx '= "" {
        set err = ..errors.get(idx)
        do rtn.WriteLine(err)
        set idx = ..errors.Next(idx)
    }
    
    do rtn.Rewind()
    
    quit rtn
]]></Implementation>
</Method>

<Method name="setTrait">
<FormalSpec>trait:%String="",value:%String=""</FormalSpec>
<Implementation><![CDATA[
    quit:$get(trait)=""
    set:$get(value)="" value = "" ; consider "uninitialized" as "empty"
    do ..displayTraits.set(trait, value)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Obtain the value of an attribute and run it through any assigned

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// conversions and converter functions.

]]></Content>
</UDLText>

<Method name="toDisplay">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set value = i%value
    quit:value="" ""
    
    set parameters = ##class(EasyCSP.Core.HashArray).%New()
    
    set key = ..conversions.Next("")
    while key '= "" {
        if $get(i%collection) = "" {
            set value = $MVOCONV(value, ..conversions.get(key))
        } else {
            set value = $MVOCONVS(value, ..conversions.get(key))
        }
        set key = $order(..conversions(key))
    }
    
    set key = ..converters.Next() 
    while key '= "" {
        
        set className =..converters.get(key)
        do parameters.set("value", value)
        set value = ##class(EasyCSP.Core.Component).runComponent(className, "converter", 1, parameters)
        
        set key = ..converters.Next(key) 
    }
    
    do parameters.set("value", value)
    quit ##class(EasyCSP.Converter.Converters.MVToHTML).run(parameters)
]]></Implementation>
</Method>

<Method name="validate">
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
    set hasValidators = 1
    try {
        if ..validators.Count() = 0 {
            set hasValidators = 0 // no validation rules; pass it.
        }
    } catch {
        set hasValidators = 0 // there are no validators
    }
    
    quit:'hasValidators 1
    
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
    
    do parameters.set("attribute", $this)
    
    set validators = ..validators
    
    set key = validators.Next("") // trundle through the validator rules
    
    set validator = validators.get(key)
    
    while validator '= "" {
        
        set validatorName = validator.ruleClass
            
        // Run the validation. An EasyCSP-compatible validator must have an error message parameter.
        do $CLASSMETHOD(validatorName, "run", parameters)
        
        set key = validators.Next(key)
        set validator = validators.get(key)
        
    }
    
    set hasError = (..errors.length() > 0)
    quit 'hasError
]]></Implementation>
</Method>
</Class>
</Export>
