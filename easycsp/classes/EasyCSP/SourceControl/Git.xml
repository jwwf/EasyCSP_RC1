<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-27 13:43:07">
<Class name="EasyCSP.SourceControl.Git">
<Description>
Interface with GIT for source control. This class is NOT ready for
production; it's just the start of the Git interface class. Be warned.
</Description>
<Super>EasyCSP.SourceControl.Base</Super>
<TimeChanged>64157,49377.255114</TimeChanged>
<TimeCreated>64150,27632.264311</TimeCreated>

<Method name="OnMenuItem">
<Description><![CDATA[
This is called for every menu item returned to Studio to allow the menu to be enabled/disabled without
having to write a custom query for <query>MenuItems</query>. The <var>DisplayName</var> of this menu is
also passed by reference and this may be modified to change the appearance of this menu item. The <var>MenuName</var>
is the main menu name then the submenu name separated by a ','. If <var>Enabled</var> is set to -1 then it will remove
this menu item from the list totally, 0 will gray the menu item out and the default 1 will display the menu item as normal.]]></Description>
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    w !!,"OnMenuItem:",!
    w "MenuName: "_MenuName,!
    w "InternalName: "_ InternalName,!
    w "SelectedText: "_SelectedText,!!
    w "Enabled: "_Enabled,!
    w "DisplayName: "_DisplayName,!!!
    w $j,!!
    
    
    Quit $$$OK
]]></Implementation>
</Method>

<XData name="Menu">
<Description>
The SourceMenu portion is displayed as "Source Control" at the top of the IDE. The "SourceContext"
menu is displayed in a right-click context menu in the source tree. Each class that extends the
EasyCSP.SourceControl.Base must make its own menus since the repo manager's commands will be
different. This class interfaces with git.</Description>
<Data><![CDATA[
<MenuBase>
<Menu Name="%SourceMenu" Type="0">
<MenuItem Name="Check Out"/>
<MenuItem Name="Undo Checkout"/>
<MenuItem Name="Check In" Save="100"/>
<MenuItem Name="Add To Source Control" Save="100"/>
<MenuItem Name="Initialize Repo" />
<MenuItem Name="Repo Status" />
<MenuItem Name="Pull Latest from Repo"/>
<MenuItem Name="Commit Repo" />
<MenuItem Name="Push Repo" />
<MenuItem Name="Export All Code"/>
<MenuItem Name="Export All Globals" />
<MenuItem Name="Export All CSP Files" />
<MenuItem Name="Make Stand-up Image" />
</Menu>
<Menu Name="%SourceContext" Type="1">
<MenuItem Name="%Check Out"/>
<MenuItem Name="%Undo Checkout"/>
<MenuItem Name="%Check In" Save="100"/>
<MenuItem Name="%Get Latest"/>
<MenuItem Name="%Add To Source Control" Save="100"/>
<MenuItem Name="Export All Code"/>
<MenuItem Name="List Source Control"/>
<MenuItem Name="Rebuild Source Control Global" />
<MenuItem Name="Export All Globals" />
<MenuItem Name="Make Stand-up Image" />
</Menu>
</MenuBase>
]]></Data>
</XData>

<Method name="UserAction">
<Description><![CDATA[
This is called when the user performs an action that may need to interact with
the server, such as selecting a menu or adding a new document. This encompases what the deprecated Flags
parameter did and allows additional flexibility.<p>
The Type argument values are:<ul>
<li>0 : Server defined menu item selected</li>
<li>1 : Other Studio action</li></ul>
When a menu item is selected the Name argument is the name of this menu item in the format
'&lt;MainMenu&gt;,&lt;SubMenu&gt;'. For other Studio actions the Name argument is one of:
<ul>
<li>0 : User has tried to change a document that is locked in source control</li>
<li>1 : User has created a new document</li>
<li>2 : User has deleted a document</li>
<li>3 : User has opened a document</li>
<li>4 : User has closed a document</li>
<li>5 : User has connected to a new namespace</li></ul>
<li>6 : User has selected to import comma delimetered list of documents</li>
<li>7 : User has saved a new document for the first time</li>
</ul>
The InternalName argument is the name of the document about which this action occurs.
If there is any selected text in the document which has focus this is sent in the SelectedText
argument.
The Action argument is set by this method to tell Studio what to do. Possible return
values for this are:<ul>
<li>0 : Do nothing, note that this method can still perform some action such as check
an item out of source control, but Studio will not ask for user input.</li>
<li>1 : Display the default Studio dialog with a yes/no/cancel button.
The text for this dialog is provided in the 'Target' return argument.</li>
<li>2 - Run a CSP page/Template. The Target is the full url to the CSP page/Template, as usual the page will be
passed the current document name, any selected text, the project name, the namespace.</li>
<li>3 - Run an EXE on the client. The Target is the name of an executable file on the client machine.
It is the responsibility of the customer to ensure this EXE is installed in a suitable location.</li>
<li>4 - Insert the text in Target in the current document at the current selection point</li>
<li>5 - Studio will open the documents listed in Target, if there are multiple documents to open they
will be separated with commas. If the document name is 'test.mac:label+10' it will open the document
'test.mac' and goto 'label+10'.</li>
<li>6 - Display an alert dialog in Studio with the text from the Target variable</li>
<li>7 - Display a dialog with a textbox and Yes/No/Cancel buttons. The text for this dialog is
provided by the 'Target' return argument. The initial text for the textbox is provided by the 
'Msg' return argument.</li>
</ul>
If the <var>Reload</var> argument is set to true then the current document will be reloaded in Studio,
this is useful if you change the document to change its attribute so Studio will pick up these changes.]]></Description>
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set whichMenu = $piece(Name, ",", 1)
    set whichItem = $piece(Name, ",", 2)
    
    write !,"User Action",!,"-----------",!
    write "Type:         ",Type,!
    write "Name:         ",Name,!
    write "Source menu:  ",whichMenu,!
    write "Menu item:    ",whichItem
    write "InternalName: ",InternalName,!
    write "Action:       ",Action,!
    write "Target:       ",Target,!
    write "Msg:          ",Msg,!
    write "Reload:       ",Reload,!
    write !!
    
    
    set args = ##class(EasyCSP.Core.HashArray).%New()
    do args.set("type", Type)
    do args.set("name", whichItem)
    do args.set("internalName", InternalName)
    do args.set("selectedText", SelectedText)
    do args.set("action", Action)
    do args.set("target", Target)
    do args.set("msg", Msg)
    do args.set("reload", Reload)
    
    // The key node in this array must match the menu item texts exactly.
    set actions = ##class(EasyCSP.Core.HashArray).%New()
    do actions.set("Check out", "gitCheckout")
    do actions.set("Undo Checkout", "")
    do actions.set("Check In", "")
    do actions.set("Pull Latest from Repo", "gitPull")
    do actions.set("Add To Source Control", "gitAdd")
    do actions.set("Initialize Repo", "gitInit")
    do actions.set("Repo Status", "gitStatus")
    do actions.set("Commit Repo", "gitCommit")
    do actions.set("Push Repo", "gitPush")
    do actions.set("Export All Code", "exportAll")
    do actions.set("Export All Globals", "exportGlobals")
    do actions.set("Export All CSP Files", "exportCSP")
    do actions.set("Make Stand-up Image", "makeStandup")
    
    set sc = $$$OK
    
    if Type = 0 {
        if actions.IsDefined(whichItem) {
            set method = actions.get(whichItem)
            if method '= "" {
                if ..hasMethod(method) {
                    Try {
                        set sc = $method(,method, args)
                        set Action = args.get("action")
                        set Target = args.get("target")
                        set Msg = args.get("msg")
                        set Reload = args.get("reload")
                    } catch exception {
                        d $SYSTEM.OBJ.Dump(exception)
                    }
                    quit sc
                }
            }
        }
    }
    
    
    Set Target="",Reload=0
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="gitAdd">
<Description>
Add an existing item to source control. </Description>
<FormalSpec><![CDATA[&args:EasyCSP.Core.HashArray=""]]></FormalSpec>
<Language>mvbasic</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    @ME->setExportDir()
    
    cmd = "cd " : @ME->RepoCloneDirectory : "; git add ."
    crt "Adding all to git with '" : cmd : "'"
    pcperform cmd capturing reply
    crt ereplace(reply, @fm, char(13):char(10))
    
    cmd = "cd " : @ME->RepoCloneDirectory : "; git add -u"
    crt "Staging adds and removes '" : cmd : "'"
    pcperform cmd capturing reply
    crt ereplace(reply, @fm, char(13):char(10))
    return 1
]]></Implementation>
</Method>

<Method name="gitCommit">
<Description>
Issue a git commit command in the source control directory. In order for
this to work, issue this command at the OS command line:
git config --global alias.nccommit 'commit -a --allow-empty-message -m ""'
Cache doesn't play well with bash if the command has quotes in it.</Description>
<FormalSpec><![CDATA[&args:EasyCSP.Core.HashArray=""]]></FormalSpec>
<Language>mvbasic</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    crt "Begin git commit"
    * Init the source control directory. It doesn't hurt to do this more than once.
    * https://git-scm.com/docs/git-init
    @ME->setExportDir() ; * initialize the export directory
    
    * Commit changes to local the repo. This updates .git data and prepares
    * for a git push.
    cmd = "cd " : @ME->RepoCloneDirectory : "; " : \git commit -a --allow-empty-message -m ""; set\
    crt; crt "Begin commit with " : cmd
    pcperform cmd capturing reply
    crt ereplace(reply, @fm, char(13):char(10))
    
    return 1
]]></Implementation>
</Method>

<Method name="gitPush">
<FormalSpec><![CDATA[&args:EasyCSP.Core.HashArray=""]]></FormalSpec>
<Language>mvbasic</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    * Init the source control directory. It doesn't hurt to do this more than once.
    * https://git-scm.com/docs/git-init
    @ME->setExportDir() ; * initialize the export directory
    
    * Commit changes to local the repo. This updates .git data and prepares
    * for a git push.
    gitRepo = "EasyCSP.Configuration.Settings"->getSetting("gitRepo")
    cmd = "cd " : @ME->RepoCloneDirectory : ";git push master"
    crt "Begin push with " : cmd
    pcperform cmd capturing reply
    crt ereplace(reply, @fm, char(13):char(10))
    
    return 1
]]></Implementation>
</Method>

<Method name="gitInit">
<Description><![CDATA[
<p>
Using SETTINGS, create an empty source control repo directory (or use
it if it already exists) then make a request to the repo to clone a
project. The remote repo may be empty but that's okay. The purpose is
to establish an initial connection between the source on disk and the
remote repo.
</p>

<p>
The last action is to export everything mentioned in the SOURCE.CONTROL
file to the source control directory on disk. Classes and routines are
cloned from Cache storage into the local repo by using the Cache
$SYSTEM.OBJ.Export(). Files that are in the CSP service directory will
be copied as-is from .../csp/<i>namespace</i>/<i>filepath</i> into
a csp subdirectory under source control.
</p>]]></Description>
<FormalSpec><![CDATA[&args:EasyCSP.Core.HashArray=""]]></FormalSpec>
<Language>mvbasic</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    * Init the source control directory. It doesn't hurt to do this more than once.
    * https://git-scm.com/docs/git-init
    @ME->setExportDir() ; * initialize the export directory
    
    command = "cd " : @ME->RepoCloneDirectory : "; git init " : @ME->exportDirectory
    crt "Begin init"
    crt command
    
    pcperform "git init " : command capturing reply
    crt reply ; * echo the response back to the output window
    
    * Clone from the repo. This sets up the connection between the
    * local repo and the github repo.
    gitRepo = "EasyCSP.Configuration.Settings"->getSetting("gitRepo")
    command = "cd " : @ME->RepoCloneDirectory : ";git clone " : gitRepo
    crt "Begin clone"
    crt command
    
    pcperform command capturing reply
    crt ereplace(reply, @fm, char(13):char(10)) ; * echo that response back to the output window
    
    return 1
]]></Implementation>
</Method>

<Method name="gitStatus">
<Description>
Get the current git status</Description>
<FormalSpec><![CDATA[&args:EasyCSP.Core.HashArray=""]]></FormalSpec>
<Language>mvbasic</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    * Init the source control directory. It doesn't hurt to do this more than once.
    * https://git-scm.com/docs/git-init
    @ME->setExportDir() ; * initialize the export directory
    
    * Commit changes to local the repo. This updates .git data and prepares
    * for a git push.
    gitRepo = "EasyCSP.Configuration.Settings"->getSetting("gitRepo")
    cmd = "cd " : @ME->RepoCloneDirectory : ";git status"
    crt "Status: " : cmd
    pcperform cmd capturing reply
    crt ereplace(reply, @fm, char(13):char(10))
    
    return 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/* ******************************************************************************************************************* */
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*                                                  Studio Events                                                      */
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/* ******************************************************************************************************************* */
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
/ These items were copied from the extension base class. TODO - finish-out the overrides.


*/
]]></Content>
</UDLText>

<Method name="OnBeforeLoad">
<Description>
This is called before the actual load of data to give the chance
to load the item from an external format.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    kill %Project ; tip from cache group
    write !,"(EasyCSP.SourceControl.StudioExtension).OnBeforeLoad(): The internal name is "_InternalName,!
    
    set InternalNamePieces = $listFromString(InternalName, ".")
    if $listGet(InternalNamePieces,$listLength(InternalNamePieces)) = "PRJ" {
        set ..currentProject = ##class(%Studio.Project).%OpenId(InternalName)
    } else {
    }
    Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This is called after the item is loaded but before it is sent to Studio
/// so you have a chance to modify this copy before it appears in the editor.
/// It is passed a reference to the object that represents this item so it
/// can be modified before Studio reads this information.
Method OnAfterLoad(
    InternalName As %String,
    Object As %RegisteredObject = {$$$NULLOREF}) As %Status
{
    Quit $$$OK
}

*/
]]></Content>
</UDLText>

<Method name="OnBeforeSave">
<Description>
Called before the item is saved to the Cache database it is passed
a reference to the current temporary storage of this item so that it
can be modified before the save completes. If you quit with an error
value then it will abort the save.</Description>
<FormalSpec>InternalName:%String,Location:%String="",Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //write !,"(EasyCSP.SourceControl.StudioExtension).OnBeforeSave(): The internal name is "_InternalName,!
    //write "External name will be: ",..ExternalName(InternalName),!
    //zwrite:Object'=$$$NULLOREF Object
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
This is called after the item has been saved to the database.
It may be passed a reference to the object representing the item
just saved. It can be use to export this documement to an external form for example.</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterStorage">
<Description><![CDATA[
This is called if you compile a class and the compilation updates the classes storage.
It is called after the storage has been updated so you can determine how to deal with this
change in the class. The <var>Location</var> is the global reference to the class definition that was changed.]]></Description>
<FormalSpec>InternalName:%String,Location:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeCompile">
<Description>
Called before the compile of the item is done.
It is passed a qstruct which can be inspected and modified.</Description>
<FormalSpec><![CDATA[InternalName:%String,&qstruct:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*

/// Called after the compile of the item is done.
Method OnAfterCompile(InternalName As %String) As %Status
{
    Quit $$$OK
}

/// Called in the class compiler after we have resolved the list of classes to be compiled but
/// before we have started the compile itself.
/// <var>List</var> is a subscripted array of items that will be compiled.
Method OnBeforeClassCompile(
    List As %String,
    Level As %Integer,
    ByRef qstruct As %String) As %Status
{
    Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="OnAfterClassCompile">
<Description><![CDATA[
Called in the class compiler after we have compiled all the classes before we exit
<var>List</var> is a subscripted array of items that were compiled. <var>Status</var> is the current compile return
error %Status, so the callback can check if there was any error in compiling the list of classes.]]></Description>
<FormalSpec><![CDATA[List:%String="",Level:%Integer,&qstruct:%String,Status:%Status]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w "OnAfterClassCompile",!,"-------------------",!
    w "List:"
    zw List
    w !!
    w "Level: ",Level,!
    w !!
    w "qstruct:",!
    zw qstruct
    w !!
    w "Status",!
    zw Status
    
    quit:$$$ISERR(Status) Status
    
    
    set InternalName = ""
    for  {
        set InternalName = $order(List(InternalName))
        quit:InternalName=""
        write !,"Internal name: ",InternalName,!
        
        /*
                
        set saveables = $listbuild("cls", "inc", "int", "mac")
        
        set len = $length(InternalName, ".")
        set extension = $mvoconv($piece(InternalName, ".", len),"MCL")
        
        if '$listFind(saveables, extension) continue
        */
             
        do ..export(InternalName_".cls")
    }
    
    w $get(%Project),!
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeAllClassCompile">
<Description><![CDATA[
Called in the activated source control class before starting a compile after we have resolved the list of classes
but before we have started the compile itself. Note that this is a class method and it does not require the source
control class to be instanciated in order for it to be called. By default it will call the <method>OnBeforeClassCompile</method>
if there is a source control class instanciated, but you can override this to do whatever you require.
Returning an error here will abort the compile.
<var>List</var> is a subscripted array of items that will be compiled.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[List:%String,Level:%Integer,&qstruct:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc=$$$OK
    If $isobject($get(%SourceControl)) {
        Set tmp=%SourceControl New %SourceControl
        Set sc=tmp.OnBeforeClassCompile(.List,Level,.qstruct)
    }
    Quit sc
]]></Implementation>
</Method>

<Method name="OnAfterAllClassCompile">
<Description><![CDATA[
Called in the activated source control class after we have compiled all the classes but before we exit.
Note that this is a class method and it does not require the source
control class to be instanciated in order for it to be called. By default it will call the <method>OnAfterClassCompile</method>
if there is a source control class instanciated, but you can override this to do whatever you require.
<var>List</var> is a subscripted array of items that were compiled. <var>Status</var> is the current compile return
error %Status, so the callback can check if there was any error in compiling the list of classes.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[List:%String,Level:%Integer,&qstruct:%String,Status:%Status]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc=$$$OK
    If $isobject($get(%SourceControl)) {
        Set tmp=%SourceControl New %SourceControl
        Set sc=tmp.OnAfterClassCompile(.List,Level,.qstruct,.Status)
    }
    Quit sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Called before an item is deleted. Returning an error code prevents the delete from occuring.
Method OnBeforeDelete(InternalName As %String) As %Status
{
    Quit $$$OK
}

/// Called after an item is deleted.
Method OnAfterDelete(InternalName As %String) As %Status
{
    Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="GetStatus">
<Description>
Return information about this entity.</Description>
<FormalSpec><![CDATA[InternalName:%String,&IsInSourceControl:%Boolean,&Editable:%Boolean,&IsCheckedOut:%Boolean,&UserCheckedOut:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set Editable=1,IsCheckedOut=0,UserCheckedOut="",IsInSourceControl=0
    quit:InternalName="" $$$OK
    if $e(InternalName,1,1)="%" {
        set Editable = 0
        set IsInSourceControl = 0
        quit $$$OK
    }
    
    // write !,"(EasyCSP.SourceControl.StudioExtension).GetStatus(): The internal name is "_InternalName,!
    // write "External name will be: ",..ExternalName(InternalName),!
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="IsReadOnly">
<Description>
Return true if this item should be marked as read only.
This is called when Studio opens a document. It is set to indicate
that the user checked the 'read only' checkbox in the open
dialog in Studio.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    Quit 0
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<Description>
Returns true if this item is in source control and false otherwise.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    Set IsInSourceControl=0
    Do ..GetStatus(InternalName,.IsInSourceControl)
    Quit IsInSourceControl
]]></Implementation>
</Method>

<Method name="ItemIconState">
<Description><![CDATA[
Used to allow Studio to display different icons in open dialog or project window etc.
Return values are:<ul>
<li>0 - Not in source control</li>
<li>1 - In source control, not checked out</li>
<li>2 - In source control and checked out so item is editable</li></ul>]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[    Quit 0
]]></Implementation>
</Method>

<Method name="OnBeforeTimestamp">
<Description>
Called before Studio checks for the timestamp of an item.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<Implementation><![CDATA[    Quit
]]></Implementation>
</Method>

<Query name="MainMenus">
<Description><![CDATA[
Provide a list of the top level menu items that Studio will add when connecting to this namespace.
For each of these top level menus Studio will call the <query>MenuItems</query> query to obtain the items in
this menu when the top level menu is selected. Each top level menu has a 'Name' and a 'Type' the
type is 0 for regular top level menus and 1 to specify the name of the context submenu that will
be added to all the context menus.<p>
Note that you can change the SQL statement or implement this query yourself this is just an example
of where you can start.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>Classname:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT Name, Type FROM %Studio_Extension.Menu WHERE MenuBase = :Classname</SqlQuery>
</Query>

<Query name="MenuItems">
<Description><![CDATA[
This query is called by Studio when the top level menu is selected and it returns the list of items
that will appear on this menu. It is passed the name of the menu and the name of the current
document that has focus or "" if there are no documents open. The fields returned are:<ul>
<li>Name - Name of this menu item</li>
<li>Enabled - True if this menu item is enabled, false to disable this menu item</li>
<li>Save - Flag to see if the current document or all documents should be saved before running this item</li>
<li>Separator - True if this is a menu separator</li></ul>
Note that you can change the SQL statement or implement this query yourself this is just an example
of where you can start.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>Classname:%String,MenuName:%String,InternalName:%String,SelectedText:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT MenuItem_Name, MenuItem_Enabled, MenuItem_Save, MenuItem_Separator FROM %Studio_Extension.Menu_MenuItem WHERE Menu->MenuBase = :Classname AND Menu->Name = :MenuName]]></SqlQuery>
</Query>

<UDLText name="T">
<Content><![CDATA[
/*
/// This is called for every menu item returned to Studio to allow the menu to be enabled/disabled without
/// having to write a custom query for <query>MenuItems</query>. The <var>DisplayName</var> of this menu is
/// also passed by reference and this may be modified to change the appearance of this menu item. The <var>MenuName</var>
/// is the main menu name then the submenu name separated by a ','. If <var>Enabled</var> is set to -1 then it will remove
/// this menu item from the list totally, 0 will gray the menu item out and the default 1 will display the menu item as normal.
Method OnMenuItem(
    MenuName As %String,
    InternalName As %String,
    SelectedText As %String,
    ByRef Enabled As %Boolean,
    ByRef DisplayName As %String) As %Status
{
    Quit $$$OK
}

/// This is called after the <method>UserAction</method> and after any template is run or dialog is displayed.
/// For list of input arguments see <method>UserAction</method>
/// In the case of the dialog the button pushed by the user is passed in Answer:<ul>
/// <li>0 - No</li>
/// <li>1 - Yes</li>
/// <li>2 - Cancel</li></ul>
/// For the dialog that contains a textbox field the text of this field is passed in 'Msg' argument.
/// In the case of a template if the template was closed from the 'x' button then Answer=2 to indicate
/// the user attempted to cancel the operation. Otherwise if the template closed normally by getting
/// to the end Answer=1.
/// For the cases where Studio did not perform any interaction this method is not called.
/// The default implementation is to call the standard source control tags as Studio did in Cache 5.0.
/// If the <var>Reload</var> argument is set to true by this method then the current document will be reloaded in Studio
Method AfterUserAction(
    Type As %Integer,
    Name As %String,
    InternalName As %String,
    Answer As %Integer,
    Msg As %String = "",
    ByRef Reload As %Boolean) As %Status
{
    Set Reload=0
    Quit $$$OK
}

/// Return 1 if you wish this item to appear as if it is 'generated' when opened in Studio,
/// return 0 to force this item not to appear as 'generated' and return "" to use normal processing
ClassMethod IsGenerated(Name As %String) As %String
{
    Quit ""
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
