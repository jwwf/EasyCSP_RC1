<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-25 17:25:33">
<Class name="EasyCSP.Views.Default.FrameworkError">
<Description><![CDATA[
<p>Display errors rather than crashing the app with a blank screen.</p>

  <p>Copyright (c) 2011 James W "Bill" Westley-Farrell</p>

  <p>Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at</p>

      <p><a href=http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>

  <p>Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.</p>]]></Description>
<Super>EasyCSP.Views.Base</Super>
<TimeChanged>64138,27013.517063</TimeChanged>
<TimeCreated>63587,31236.327935</TimeCreated>

<Method name="run">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    
    set $zt = "lastResort"
    set htmlOptions = ##class(EasyCSP.Core.HashArray).%New()
    do htmlOptions.set("id", "error-block")
    do ..openTag("div",htmlOptions)
            
    do ..addContent("            <div class=""errorSummary"">")
    if ..hasConditions() {
        do:..hasConditions() ..addStreamContent(..formatConditionsHTML())
    }
    
    do ..addContent("$ZE = '"_ ..encode($ZE)_"'")
    do ..addContent(##class(%SYSTEM.Process).ErrorLine())
    
    do ..closeTag("div") // end of "msgs" div
    
    set theException = %EasyCSPException
    set:$get(theException)="" theException = ..data.get("exception")
    
    //do ..addStreamContent(..debugDump(theException))
    
    do ..closeTag("div") // end of "msgs" div
    
    do htmlOptions.unsetAll()
    //do htmlOptions.set("id", "content-wrapper")
    //do ..openTag("div", htmlOptions)
    //
    if %EasyCSPExceptionStack.length() = 0 {
        
        do ..addContent("<h2>Traceback</h2>")
        do ..openTag("pre")
    
        set level = $STACK(-1)
        set ctr = 0
        FOR loop= level:-1:0 { 
            do ..addContent( "Level "_loop_", context "_$STACK(loop)_": "_$STACK(loop,"PLACE")_ ", line: "_$STACK(loop,"MCODE"))
        }
        
        do ..closeTag("pre")
    
    } else {
    
        for key = %EasyCSPExceptionStack.length():-1:1 {
            set theException = %EasyCSPExceptionStack.get(key)
            
            do ..addContent("<h2>%EasyCSPExceptionStack Entry "_key_"</h2>")
            
            if $get(theException) [ "Exception" {
                
                if $get(theException) [ "Core.Exception" {
                    // This is a framework-caught exception. Dump the extended properties.
                    set ..pageTitle = "Framework Exception"
                    do ..dumpFrameworkException(theException)
                } else { 
                    // This is s system exception
                    set ..pageTitle = "Cache System Exception"
                    do ..dumpSystemException(theException)
                }
            }
        }
        
    }
            
    if $isobject(%EasyCSPApp) {
        do ..addContent("<h2>CGI Data</h2>")
        do ..addStreamContent(%EasyCSPApp.cgiData.dumpAsStream())
        do ..addContent("<h2>Request Data</h2>")
        do ..addStreamContent(%EasyCSPApp.requestData.dumpAsStream())
        do ..addContent("<h2>Session Data</h2>")
        do ..addStreamContent(%EasyCSPApp.sessionData.dumpAsStream())
    }
            
    do ..closeTag("div")
            
    do ..closeTag("div")
    
    set %EasyCSPExceptionStack = ##class(EasyCSP.Core.Array).%New() // handled
    
    quit $$$OK
    
lastResort
    set $ZT = ""
    write "<pre>",!
    write "Last-resort trap. There is a deep framework exception.",!
    write "Please report this to the author, along with any unusual",!
    write "circumstances such as model or controller code you suspect",!
    write "may have contributed to the error.",!
    do:$isobject(theException) $SYSTEM.OBJ.Dump(theException)
    write "</pre>",!
    halt
]]></Implementation>
</Method>

<Method name="dumpFrameworkException">
<FormalSpec>theException</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
    do ..addContent("<p class=""errorLegend"">A framework exception occurred whilst processing the request:</p>")
    do ..addContent("<br /><br />")
    do ..addContent("<pre>")
    
    if theException.HasInnerException {
        do ..addContent("Inner exception details:")
        do ..addContent("Name: "_theException.InnerException.Name)
        do ..addContent("Code: "_theException.InnerException.Code)
            
        set desc = $listFromString(theException.InnerException.Data,$MVAM)
        set ll = $listLength(desc)
        for d = 1:1:ll {
            do ..addContent("Data "_d_": "_$listGet(desc,d))
        }
        
        do ..addContent("Loc:  "_theException.InnerException.Location)
        
    }
    
    do ..addContent("Exception details:")
    do ..addContent("Name: "_theException.ExceptionName)
    do ..addContent("Code: "_theException.ExceptionCode)
    
    do ..closeTag("pre")
    
    //do ..addStreamContent(..captureObjDump(theException.Description))
    do ..addStreamContent(theException.Description.dumpAsStream())
        
    do ..addContent("Loc:  "_theException.ProgramLocation)
    
                
    set ord = theException.Traceback.Next("")
    if ord '= "" {
        do ..addContent("<table class=""activeTable"">")
        do ..addContent("<caption>Traceback</caption>")
        while ord '= "" {
            do ..addContent("<tr><td width=""15%"" style=""text-align: right top;"">"_ord_"</td><td>&nbsp;&nbsp;"_theException.Traceback.get(ord)_"</td></tr>")
            set ord = theException.Traceback.Next(ord)
        }
        do ..addContent("</table>")
    }
        
    //do ..addStreamContent(..debugDump(theException))
    
    set theException = "" ; remove oref
]]></Implementation>
</Method>

<Method name="dumpSystemException">
<FormalSpec>theException</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
    do ..addContent("<p class=""errorLegend"">")
    do ..addContent("<br /><br />")
        
    if $ZERROR="" {
        do ..addContent("A system exception occurred whilst processing the request:")
    } else {
        do ..addContent($ECODE_": "_$ZERROR)
    }
    
    do ..addContent("</p>")
    
    do ..addContent("<pre>")
        
    do ..addContent("Exception details:")
    do ..addContent("Name: "_theException.Name)
    do ..addContent("Code: "_theException.Code)
    //do ..addContent("Desc: "_%SYSTEM.Status.GetErrorText(theException.AsStatus))
    do ..addContent("Data: "_theException.Data)
    do ..addContent("InEx: "_theException.InnerException)
    do ..addContent("Loc:  "_theException.Location)
    
    do ..addStreamContent(..dumpEntirely(theException))
    
    do ..addContent("</pre>")
         
    do ..addContent("<table>")
    do ..addContent("<caption>Stack</caption>")
    
    do theException.StackAsArray(.stack)
    set ord = $order(stack(""), -1)
    while ord '= "" {
        do ..addContent("<tr><td width=""20%"" style=""text-align: right top;"">"_ord_"</td><td>&nbsp;&nbsp;"_stack(ord, "PLACE")_"</td></tr>")
        set ord = $order(stack(ord), -1)
    }
    do ..addContent("</table>")
        
        do ..addStreamContent(..debugDump(theException))
    set theException = "" ; remove oref
            
    quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
