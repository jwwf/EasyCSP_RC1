<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-27 08:28:14">
<Class name="EasyCSP.Views.Default.Form">
<Description><![CDATA[
<p>
Default create/update view. Clone and modify, place in the local "Views.Site" package. Do
not modify this as changes will be overwritten on package upgrade. If a create/update form
does not exist in the View.{controller.id} subpackage then the factory will select the
default.
</p>

<p>
To create your own custom input form, clone this class into your own Views folder and
modify it to suit. Examples of things you might want to change would be the order in
which controls are placed on the page, or to add display traits to one more more
attributes (setting read-only or modifying value-lists, etc), and so forth. All of
the presentation can be altered on the fly to suit custom business rules or exceptions.
</p>

<p>

  <p>Copyright (c) 2011 James W "Bill" Westley-Farrell</p>

  <p>Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at</p>

      <p><a href=http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>

  <p>Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.</p>]]></Description>
<Super>EasyCSP.Views.Base</Super>
<TimeChanged>64150,80006.323555</TimeChanged>
<TimeCreated>63541,31504.474773</TimeCreated>

<Method name="run">
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    // A form can not function without data models.
    set models = parameters.get("models")
    if $get(models)="" {
        throw ##class(EasyCSP.Core.Exception).%New($classname(), 404,"Please supply at least one data model for the form generator.")
        quit 0
    }
    
    set form = parameters.get("model")
    set ..formId = form.modelId
    
    // Get or guess the presentation. If the controller isn't set up
    // correctly, an exception will be thrown. If the presentation can
    // be retrieved or guessed then parameters.get("presentation") will
    // have the forwarding action for the form.
    do ..formPresentation()
    
    // Use the default page title. Presentations supported are "create" and "update"
    do ..formPageTitle() 
    
    /* ****************************************** Begin Form ************************************* */
    
    set htmlOptions = ##class(EasyCSP.Core.HashArray).%New()
    set ..formId = "defaultForm"
    do htmlOptions.set("id", ..formId)
    do htmlOptions.set("enableAjaxValidation", 0)
    do htmlOptions.set("enctype", "multipart/form-data")
    do ..beginForm("post", htmlOptions)
        
    // First, if "id" is provided, add that as the "main" or "lead" id for an app form
    set id = parameters.get("id")
    if id '= "" {
        set hiddenfieldOptions = ##class(EasyCSP.Core.HashArray).%New()
        do hiddenfieldOptions.set("id", "id")
        do hiddenfieldOptions.set("name", "id")
        do hiddenfieldOptions.set("value", id)
        do ..hiddenField(hiddenfieldOptions)
    }
    
    // Next, create hidden fields for each app model's key
    set next = models.Next()
    while next '= "" {
        
        set recordModel = models.get(next)
        set id = recordModel.recordId
    
        set hiddenfieldOptions = ##class(EasyCSP.Core.HashArray).%New()
        do hiddenfieldOptions.set("id", next_"_id")
        do hiddenfieldOptions.set("name", next_"_id")
        do hiddenfieldOptions.set("value", id)
        do:id'="" ..hiddenField(hiddenfieldOptions)
        
        set next = models.Next(next)
    }
    
    // the div inside the clear panel in the page
    do htmlOptions.unsetAll()
    do htmlOptions.set("class", "container")
    do htmlOptions.set("style", "float: left; width: 90%")
    do ..openTag("div", htmlOptions)
    
    
    /* **************** Start the form elements. Surround the visible elements with a fieldset. *** */
    do htmlOptions.set("style", "width: 90%;margin:0 15px;")
    do ..openTag("fieldset",htmlOptions)
    
    do ..formMessageAreas(models) // divs for script and model error messages
    
    do ..addContent("<p class=""note"">Hover your mouse over the labels for additional help. Fields highlighted in yellow are required. Fields highlighted in red have errors that must be corrected.</p>")
        
    set columnOrder = parameters.get("columnOrder")
    set:columnOrder="" columnOrder = form.columnOrder
    
    do ..formControlGroups(models, columnOrder) // put control groups on the page
    
    
    // Make a div just for the submit and cancel buttons
    do ..formSubmitCancel()
        
    do ..closeTag("fieldset")
    /* **************************** end the inner container div ****************************** */
    do ..closeTag("div")
    
    /* ***************************** end the form ******************************************** */
    do ..endForm()
    
    set js = "$(""#"_..formId_""").validate();"
    do %EasyCSPApp.controller.layout.scripting.registerScript("doValidate_"_..formId, js, %EasyCSPApp.controller.layout.scripting.%GetParameter("posEnd"), 1)
    
    quit 1
]]></Implementation>
</Method>
</Class>
</Export>
