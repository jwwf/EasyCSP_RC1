<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-26 15:38:27">
<Class name="EasyCSP.Controller.Base">
<Description><![CDATA[
<p>
Superclass for app controller objects. The application class will need to call
two actions after the instance is created: beforeHTTP (if custom HTTP headers
are to be added to the response) and, if that is successful then call the rendering engine
to process and deliver page content.
</p>

<p>
The default layout file (as shipped with the framework) is <class>EasyCSP.Layouts.Default</class>.
It is suggested to override this layout class with a custom. The custom should be placed in "Layouts.<i>yourLayout</i>".
The controller base class with search two packages for the custom layout named in the <property>layout</property>
property: Layouts and EasyCSP.Layouts. These values will be prepended to the value in
<property>layout</property>.
</p>

<p>
A controller performs <i>actions</i>. An action could be "index" (the default), "view", "create",
"update", etc. For each controller, an index action and view should be written. If no action
is supplied in the query-string route parameter, index is the default. As with the layout, the
controller base class will search for the requested action's view first in the site-custom
"Views.<i>controllerId</i>" package and if the view is not located there, inside the
"EasyCSP.Views.<i>controllerId</i> package. This way, any default view shipped with
the MVC Framework may easily be overridden.
</p>

  <p>Copyright (c) 2011 James W "Bill" Westley-Farrell</p>

  <p>Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at</p>

      <p><a href=http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>

  <p>Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.</p>]]></Description>
<Abstract>1</Abstract>
<CompileAfter>EasyCSP.Core.Component</CompileAfter>
<Super>EasyCSP.Core.Component</Super>
<TimeChanged>64146,68227.107526</TimeChanged>
<TimeCreated>63460,42024.981464</TimeCreated>

<Property name="accessRules">
<Type>EasyCSP.Controller.AccessRule</Type>
<Final>1</Final>
<Collection>array</Collection>
<Private>1</Private>
</Property>

<Property name="action">
<Description>
currently-request action</Description>
<Type>%String</Type>
</Property>

<Property name="actionMap">
<Description>
Case-desensitize action names</Description>
<Type>EasyCSP.Core.HashArray</Type>
</Property>

<Property name="debugInfo">
<Description><![CDATA[
A catch-bin for debug output from controller extents. A controller
can not write output to a view because the layout hasn't been instantiated
until after <method>.render()</method> is called. There is a space between
<method>.run()</method> and .render() where output can not be written to
page output. The default layout has this inclusion of debugging information.]]></Description>
<Type>%GlobalCharacterStream</Type>
</Property>

<Property name="defaultAction">
<Description>
if no action is specified in the route, use the controller's index-page action</Description>
<Type>%String</Type>
<InitialExpression>"index"</InitialExpression>
</Property>

<Parameter name="defaultLayout">
<Type>%String</Type>
<Default>Default</Default>
</Parameter>

<Property name="headers">
<Description>
Any HTTP headers that need to be sent out before content</Description>
<Type>EasyCSP.Core.HashArray</Type>
</Property>

<Property name="id">
<Description>
class name</Description>
<Type>%String</Type>
</Property>

<Property name="isAdmin">
<Description>
If the user's group membership includes "siteadmin" (the framework
super-user group) then isAdmin is set to 1 (TRUE).</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="isSuperUser">
<Description>
Prevent any other process from changing the superuser flag but
allow other processes to read it.</Description>
<Type>%Boolean</Type>
</Property>

<Method name="isSuperUserGet">
<Implementation><![CDATA[    quit i%isAdmin
]]></Implementation>
</Method>

<Method name="isSuperUserSet">
<FormalSpec>ignored</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit $$$ERROR("This property can not be set.")
]]></Implementation>
</Method>

<Property name="isAjax">
<Description>
Controllers can set this flag to indicate they've detected an
an action that is to be satisfied by an AJAX response. Such a
response is written directly to output rather than being placed
in a layout</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="layout">
<Description>
This is an instance of a layout object selected by the controller or
controller action. The layout class selection can be done in the
controller's afterConstruct() event or in the controller action before
calling render().</Description>
<Type>EasyCSP.Core.Component</Type>
</Property>

<Property name="layoutName">
<Description><![CDATA[
<p>
The class name of the layout to use. The layout class must reside in one of two packages:
Layouts or EasyCSP.Layouts. The "Views" package is where are all site-custom
views and layouts should reside, leaving the pre-packaged EasyCSP intact, thus easily
upgraded.
</p>

<p>
There are two ways to select for a custom layout. Either set %EasyCSPApp.controller.layoutName
in the controller extent class or clone this base class into a new base class in your local
Controller subpackage then modify it it suit. The former is the most preferable since it
allows the controller to select a layout based on the viewer's traits, such as group/company,
or to use a custom, per-person layout on the fly. This is most useful for running a site
as SaaS or to accommodate persons with disabilities without disturbing any other existing
layout. Handling layout selection thus allows users who depend on braillewriters or vocoding
software like Jaws to have their own layout and rendering that will accommodate their
special needs.
</p>]]></Description>
<Type>%String</Type>
<InitialExpression>"Default"</InitialExpression>
</Property>

<Property name="pageStates">
<Type>%String</Type>
<Final>1</Final>
<Private>1</Private>
</Property>

<Property name="pageTitle">
<Description>
Set the page title in a controller action before calling render(). The default page title
is "Set the page title!". Page title is set by adding a "pageTitle" name-value pair to
the parameters passed to render().</Description>
<Type>%String</Type>
<Final>1</Final>
<Private>1</Private>
</Property>

<Property name="permitted">
<Description><![CDATA[
Set when an action request is analyzed against access rules. A layout or view requesting
sub-runs of a controller may query this flag after a new controller is instantiated to
determine whether a requested sub-action <i>may</i> be taken.]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="renderedPage">
<Description>
This is the stream into which the layout will compile the various page segments into a
single, coherent output page.</Description>
<Type>%GlobalCharacterStream</Type>
<Final>1</Final>
</Property>

<Method name="%OnNew">
<Description>
Instantiates the object and processes the afterConstruct event if it exists.</Description>
<Final>1</Final>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
    
    // The controller id is the simple classname without the package. The controller
    // will use this value to locate the requested view first in "Views.<i>controllerId.viewname</i>"
    // (the site-custom package) then in "EasyCSP.Views.<i>controllerId.viewname</i>".
    // This allows the programmer to override any default-packaged controller and view.
    set ..id = $piece($classname(), ".", $length($classname(), "."))
    
    set ..headers = ##class(EasyCSP.Core.HashArray).%New()
    
    set ..debugInfo = ##class(%GlobalCharacterStream).%New()
    set ..renderedPage = ##class(%GlobalCharacterStream).%New()
    
    set:..action="" ..action = parameters.get("action")
    set:..action="" ..action = "index"
    
    do ..createActionMap()
    
    // Fire the afterConstruct event handler if it exists
    do:..hasMethod("afterConstruct") $METHOD($THIS,"afterConstruct")
    
    // Fire the accessRules event handler if it exists.
    do:..hasMethod("accessRules") ..accessRules()
    
    // For example, the signature for the handler that creates an index page is "actionIndex(optional_parameters)"
    set ..permitted = ..applyAccessRules(..action) 
    
    set ..debugging = 1
    
    // Because CSP pages are constructed with class methods (equivalent to PHP statics) rendering
    // happens in two main phases: OnPreHTTP and OnPage. The controller is created in the OnPreHTTP
    // phase. This allows the controller to be found (or not) and HTTP headers to be set. The latter
    // *must* be assigned before the first text is sent. Custom headers may be assigned in the
    // optional before action event handler (ie, beforeIndex, beforeView, etc). Page rendering is
    // delayed until the OnPage CSP phase. The app will call {controller}.run() to build, finalize,
    // and then output the page content.
        set beforeMethod = ..actionNameToMethod("before"_..action)
    if %EasyCSPApp.httpState = "preHTTP" {
        if (beforeMethod'="")&(..hasMethod(beforeMethod)) {
            do $METHOD($THIS,beforeMethod, parameters)
        }
    } else {
        if ..debugging {
            d ..debugInfo.WriteLine("<pre>")
            d ..debugInfo.CopyFrom(..actionMap)
            d ..debugInfo.WriteLine("</pre>")
        }
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="addAccessRule">
<Description><![CDATA[
<p>
Access rule. Multiple rules per action may be specified. Validators
must exist as a class in the EasyCSP.Validators package. To add a new
Access rule, create a new class to handle the rule in that package. A
new rule will be automatically detected and immediately available upon compile.
Note that NO ACTION IS ALLOWED until explicitly allowed to a user or group.
</p>]]></Description>
<Final>1</Final>
<FormalSpec>action,users:%String="*",groups:%String="*"</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    If $get(action)="" do ..SetCondition(1, "Specify which action(s) to which the rule should be applied") quit 0
    If $get(users)="" set users = "*" ; default to "all users"
    if $get(groups) = "" set groups = "*" ; default to "any group"
    
    set rule = ##class(EasyCSP.Controller.AccessRule).%New(action,users)
    
    do:$IsObject(rule) ..accessRules.SetAt(rule, ..accessRules.Count() + 1)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="applyAccessRules">
<Description><![CDATA[
<p>
Any request for an action that is not explicitly allowed is implicitly forbidden. 
Besides valid user names, the following keywords are also
used. Single characters are used to denote certain classes or categories of users.
These special characters are used for user categories to prevent them from conflicting
with actual user names.
</p>
<ul>
<li><strong>*</strong> => the rule is applied to all users regardless of whether they're logged in.</li>
<li><strong>@</strong> => the rule applies to users who are logged in.</li>
<li><strong>-</strong> => the rule applies to the guest user (anyone not logged in).</li>
<li>string{,<i>string</i>, ...}</strong> ==> the current user will be allowed access if that user belongs to a group named in <i>string</i>.</li>
</ul>]]></Description>
<Final>1</Final>
<FormalSpec>action=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    if $get(action) = "" set action = ..action
    if $get(action) = "" {
        set (..action,action) = "index"
    }
    
    set action = $mvoconv(action,"MCT")
    
    // set user id
    set userId = %EasyCSPApp.getSession("uid")
    set:userId="" userId = "guest"
    
    set myself = %EasyCSPApp.users
    set myShadow = %EasyCSPApp.userShadow
    
    if '..instanceOf(myself, "Users") {
        set myself = ##class(EasyCSP.Core.Component).objectFactory("Users", "model") ; create an empty user record for guests
        set myShadow = ##class(EasyCSP.Core.Component).objectFactory("UserShadow", "model")
    }
    
    // get the list of groups to which this user belongs
    set myGroups = myself.getAttributeValue("groupid")
    set memberOf = ##class(EasyCSP.Core.Array).%New()
    do memberOf.split(myGroups, $mvvm)
        
    /// A member of the "siteadmin" can do anything, any time.
    if memberOf.find("siteAdmin") {
        set groupGood = 1
        set ..isAdmin = 1 // inform the rest of the framework
        quit 1 ; we're done
    }
    
    set OK = 0 // assume the action will be denied
    
    // The first rule that allows the current user and group combination
    // will end the search. Any action is implicitly denied unless it is
    // explicitly allowed.
    set userGood = 0
    set groupGood = 0
    
    set key = ..accessRules.Next("")
    while key '= "" {
        
        // Grab the next rule in line
        set rule = ..accessRules.GetAt(key)
        set found = $listFind(rule.actions, action)
        if found = 0 {
            set key = ..accessRules.Next(key)
            continue
        }
        
        /**
        * First check this user against the list in the rule being used.
        **/
        
        // A rule covering this action has been retrieved. If any user may run this action
        // then proceed. First, check "all users".
        if $listFind(rule.users, "*") > 0 {
            set userGood = 1
        }
        
        // If the current rule doesn't apply, check "all logged in users".
        if $listFind(rule.users, "@") > 0  & (userId '= "guest") {
            set userGood = 1
        }
        
        // Guest users
        if ($listFind(rule.users,"-")) & (userId = "guest") {
            set userGood = 1
        }
        
        // Any user in the current entity who has a role level equal to or greater than the named role.
        // Note: if this role isn't found in the
        
        // Last, see if the current rule only applies to certain users.
        if $listFind(rule.users, userId) > 0 {
            set userGood = 1
        }
        
        // A user, even a guest, will fall under at least one of the
        // conditions checked above. If the user doesn't qualify under
        // those tests there's no use in checking group. Remember that
        // "*" (all users or all groups) is the default for an empty
        // user or group property in the rule.
        if 'userGood {
            set key = ..accessRules.Next(key)
            continue
        }
        
        /**
        * If the user is allowed under one of the user rules above then
        * check group membership.
        **/
        
        
        // The "any group" rule:
        if $listFind(rule.groups, "*") > 0 {
            set groupGood = 1
        }
        
        if 'groupGood {
            set allowedGroups = ##class(EasyCSP.Core.Array).%New()
            do allowedGroups.splitList(rule.groups) // split the list into an array
            set matches = allowedGroups.intersect(memberOf)
            set:matches.Count()>0 groupGood = 1
            quit
        }
        
        quit:userGood&groupGood
        
        set key = ..accessRules.Next(key)
    }
    
    quit (userGood & groupGood)
]]></Implementation>
</Method>

<Method name="createActionMap">
<Description>
An action is a key to a controller method that also starts with
"action". That part is always lower-case. To remove case-sensitivity
(and hard-to-find errors in execution), create a map where the
normalized method name is a key to the method name as it appears
in the controller extent class.</Description>
<Language>mvbasic</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    @ME->actionMap = "EasyCSP.Core.HashArray"->%New()
    def = "%Dictionary.ClassDefinition"->%OpenId(@ME->getClassname())
    methods = def->Methods
    
    acceptableMethods = "action" : @fm : "widget" : @fm : "before"
    
    methodKey = methods->Next("")
    *crt "MethodKey:" : methodKey : "->":
    Loop while methodKey <> "" do
        methodDef = methods->GetAt(methodKey)
        methodName = methodDef->Name
        methodNameL = oconv(methodName, "MCL")[1,6]
        
        * or (downcase(methodName[1,6]="before"))
        if (methodDef->Private <> 1) then
            find methodNameL in acceptableMethods setting amc then
                actionName = OCONV(methodName[7,99], "MCL")
                @ME->actionMap->set(actionName, methodName)
                @ME->actionMap->set(downcase(methodName), methodName)
            end
        end
        methodKey = methods->Next(methodKey)
    repeat
    
    return 1
]]></Implementation>
</Method>

<Method name="getClassname">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $classname($this)
]]></Implementation>
</Method>

<Method name="actionNameToMethod">
<Description>
Find the actual method name by lookup</Description>
<FormalSpec>actionName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    quit:$get(actionName)="" ""
    quit ..actionMap.get($mvoconv(actionName, "MCL"))
]]></Implementation>
</Method>

<Method name="setSuperUserFlag">
<Description>
Detect super-user membership. If a user's groupid attribute contains
"siteAdmin" then the user id automatically a super-user.</Description>
<Private>1</Private>
<Implementation><![CDATA[
    set users = %EasyCSPApp.users
    set userGroups = ##class(EasyCSP.Core.Array).%New()
    do userGroups.split(users.getAttributeValue("groupId"), $mvvm) // here's a list of what the user has, regardless if it's right
    set i%isAdmin = userGroups.find("siteAdmin")
]]></Implementation>
</Method>

<Method name="setHeader">
<FormalSpec>name:%String="",value:%String=""</FormalSpec>
<Implementation><![CDATA[
    quit:$get(name)=""
    set:$get(value)="" value = "" // default uninitialized value to <empty>
    do:%EasyCSPApp.pageState="preHTTP" ..headers.set(name, value)
]]></Implementation>
</Method>

<Method name="run">
<Description>
Actions are identified as having all lower-case characters except for an initial
upper case character. Action ID's don't begin with the string "action"; that is
prepended during calls to each particular action function. The ID is the simple
name, like "Index", "View", "Update", etc. Identifying actions this way allows
the framework to construct, search for, and call event handlers (like beforeIndex,
beforeView, etc). The run() method will look for methods beginning with the string
"action". Thus, in order to perform action "Xyz" needed to set headers before the
page is rendered, the controller will search for "Method beforeXyz()" in the OnPreHTTP
CSP phase. In the OnPage() phase, the controller will search for "Method actionXyz()"
in the compiled class. In both cases, only the string "Xyz" is passed to the controller
to locate the beforeIndex() event handler and the actionIndex() rendering event.</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
    //set %EasyCSPApp.httpState = "page"
    
    // If this person has already authenticated then grab the user and shadow records.
    // This information is used by the controller to enforce access rules.
    set users = ##class(EasyCSP.Core.Component).objectFactory("Users", "model")
    set userShadow = ##class(EasyCSP.Core.Component).objectFactory("UserShadow", "model")
    
    if (%EasyCSPApp.uid '= "guest") & (%EasyCSPApp.uid '= "") {
        do users.read(%EasyCSPApp.uid)
        do userShadow.read(%EasyCSPApp.uid)
    }
    
    set %EasyCSPApp.users = users
    set %EasyCSPApp.userShadow = userShadow
    
    set actionMethod = ..actionNameToMethod("action"_..action)
    
    do ..setSuperUserFlag() // now that there's a user record, set the superuser flag is set one way or the other
    
    set actionId = actionMethod
    
    s priorAction = ..action
            
    set OK = 1
    
    if $get(stopit) '= "" halt // for debugging to stop an endless loop
    
    //if (%EasyCSPExceptionStack.Count() > 0) {
        if ..hasMethod(actionId) & ..permitted {
            
            try {
                set OK = $METHOD(, actionId, parameters)
            } catch %EasyCSPException {
                do parameters.set("exception", %EasyCSPException)
                do ..SetCondition("CTLRRUN", "An exception occurred trying to run "_..id_"::"_actionId)
                do ..renderError(parameters)
                set OK = 0
            }
            
        } else {
            do ..SetCondition(301, "<p>You do not have permission to run the requested action.<p>")
                do ..debugInfo.CopyFrom(..captureObjDump(..actionMap))
                do ..debugInfo.Write("<pre>"_$ClassName()_", Action id was "_actionId_", requested action was "_..action_", permitted = "_..permitted_"</pre>")
                do ..debugInfo.WriteLine("<pre>")
                do ..debugInfo.CopyFrom(..captureObjDump(..actionMap))
                do ..debugInfo.WriteLine("</pre>")
            
            do ..renderError(parameters)
            set OK = 0
        }
        
        if %EasyCSPException '= "" {
            do ..renderError(parameters)
            set OK = 0
        }
    
    do %EasyCSPApp.saveToSession()
        
    set ..action = priorAction
    quit OK
]]></Implementation>
</Method>

<Method name="afterConstruct">
<Description>
Placeholder function for documentation.
The afterConstruct event will be run by the application automatically immediately
after the desired controller has been instantiated. Minimally, the access rules for
each action should be set up. That is, each user-facing view controller must set 
access rules for each action the controller will perform.</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit 1
]]></Implementation>
</Method>

<Method name="afterRender">
<Description>
Placeholder function. If needed, the child controller class should override this method.</Description>
<FormalSpec>view:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit 1
]]></Implementation>
</Method>

<Method name="beforeRender">
<Description>
Placeholder function. If needed, the child controller class should override this method.</Description>
<FormalSpec>view:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit 1
]]></Implementation>
</Method>

<Method name="render">
<Description><![CDATA[
<p>
Start by obtaining the layout. The layout defaults to EasyCSP.Views.Default.Layout.
That can be overridden any time during controller setup BEFORE an action is run. The
layout value can be changed but that will have no effect.
</p>]]></Description>
<Final>1</Final>
<FormalSpec>view:%String,parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
        
    // A controller can "soft redirect" control to another controller by using a fully-qualified
    // route (a string with a forward slash, ie the "controller/view" route format).
    if view [ "/" {
        set OK = %EasyCSPApp.init(view)
        if $$$ISERR(OK) {
            throw ##class(EasyCSP.Core.Exception).%New("run",404,"","The requested route "_view_" can not be located.")
            quit
        }
        quit %EasyCSPApp.controller.run() ; run the new route
    }
    
    // Find a layout. The layout property may be altered by an extent of Controller.Base.
    if ..layoutName = "" {
        set ..layoutName = ..#defaultLayout
    }
    
    //set:'..instanceOf(parameters,"HashArray") parameters = ##class(EasyCSP.Core.HashArray).%New()
    do parameters.set("view", view)
    do parameters.set("controller", $this) // may need override for errors; THIS is the controlling object.
    
    do:%EasyCSPDebugging ..debugInfo.CopyFrom(..debugDump(parameters))
    
    set layoutObj = ""
    
    // Call the factory to find the layout.
    
    try {
        set layoutObj = ##class(EasyCSP.Core.Component).objectFactory(..layoutName, "layout", 1, parameters)
    } catch { // The requested layout didn't exist or has a problem. Use the default.
        set ..layoutName = "default"
        set layoutObj = ##class(EasyCSP.Core.Component).objectFactory(..layoutName, "layout", 1, parameters)
    }
    
    set ..layout = layoutObj
        
    if ..hasMethod("beforeRender") do ..beforeRender()
    
    if ..hasConditions() set ..layout.errors = ..errors
    
    try {
        do ..layout.run(parameters)
    } catch %EasyCSPException {
        // Just hold on to the exception so debug information can be displayed in the next step
        write "<pre>",!
        do $SYSTEM.OBJ.Dump(parameters)
        do $SYSTEM.OBJ.Dump(%EasyCSPException) 
        write "</pre>",!
    }
    
    if $get(%EasyCSPException)'="" {
        quit 1
    }
    
    set hasError = 0
    try {
        set ok = ..layout.render()
    } catch %EasyCSPException {
        do parameters.set("theException", %EasyCSPException)
        set viewObj = ##class(EasyCSP.Core.Component).objectFactory("FrameworkError", "view", 1, parameters)
        do %EasyCSPApp.controller.layout.view.addStreamContent(..debugDump(%EasyCSPException))
        do viewObj.run()
        do ..renderedPage.CopyFrom(viewObj.render())
        set hasError = 0
    }
    
    if ..hasMethod("afterRender") do ..afterRender()
    
    if $get(%EasyCSPException)'="" {
        set %EasyCSPException = "" ; handled, no longer needed
    }
    
    quit:hasError 1
    
    /*
    // If logging is turned on, log the results
    set doLog = ##class(EasyCSP.Configuration.Settings).getSetting("log")
    if doLog {
        do ##class(EasyCSP.Network.Log).newEntry("http",..renderedPage,..action)
    }
    */
    
    // Emit the compiled page back to the requester
    do ..directWrite(..renderedPage)
    
    quit 1
]]></Implementation>
</Method>

<Method name="renderError">
<Description><![CDATA[
<p>
Start by obtaining the layout. The layout defaults to EasyCSP.Layouts.Site.
That can be overridden any time during controller setup BEFORE an action is run. The
layout value can be changed but that will have no effect.
</p>]]></Description>
<Final>1</Final>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    
    set:'..instanceOf(parameters,"Array") parameters = ##class(EasyCSP.Core.HashArray).%New()
    //do %EasyCSPExceptionStack.append(%EasyCSPException)
    set %EasyCSPException = ""
    
    set controller = ""
    set newException = 0
    
    set newController = ##class(EasyCSP.Controller.Controllers.Site).%New()
    do newController.debugInfo.CopyFrom(..debugInfo)
    do parameters.set("action","error")
    do parameters.set("controller", newController)
    do parameters.set("view", "Error")
    set layout = ##class(EasyCSP.Core.Component).objectFactory("Default", "layout", 1, parameters)
    set layout.errors = ..errors
    
    // In order to prevent endless loops if something goes awry in the error
    // page (as in a mistake might be introduced during customization) run
    // the layout directly. DO NOT use the Site (or other) controller to
    // generate the error page. The controller instantiated above and passed
    // via "parameters" can cause an endless loop thereby bringing the
    // superserver thread to a halt. It will be necessary to restart Cache
    // in order to repair that.
    // 
    // The $SYSTEM.OBJ.Dump() calls are a means of last resort. At the worst,
    // if customization has introduced an error in the Error page, the 
    // programmer has some clue of what went wrong and how to repair it.
    try {
        do layout.run(parameters)
        do ..directWrite(layout.render())
    } catch %EasyCSPException {
        do $SYSTEM.OBJ.Dump(%EasyCSPException)
    }
    
    set %EasyCSPException = "" ; handled, no longer needed
    
    set %EasyCSPExceptionStack = ##class(EasyCSP.Core.Array).%New()
    quit 1
    
    /* If logging is turned on, log the results
    set doLog = ##class(EasyCSP.Configuration.Settings).getSetting("log")
    do:doLog ##class(EasyCSP.Network.Log).newEntry("http",..renderedPage,..action)
    */
    
    // Emit the compiled page back to the requester. The compiled page will
    // be in the Site controller instantiated above, not in this controller.
    do controller.emit(..renderedPage)
    
    quit 1
]]></Implementation>
</Method>

<Method name="directWrite">
<Description>
This is used by AJAX request calls to output content directly
using Cache "write" rather than compiling it into a layout.</Description>
<FormalSpec>stream:%GlobalCharacterStream</FormalSpec>
<Implementation><![CDATA[
        
    if $get(stream)["Stream" {
        do stream.Rewind()
        while stream.AtEnd = 0 {
            set len = 2048
            write stream.Read(len)
        }
    } else {
        do ..renderedPage.Rewind()
        
        while (..renderedPage.AtEnd = 0) {
            set len = 1024
            //write !!,"writing buffer",!!
            write ..renderedPage.Read(.len)
        }
    
    }
    
    quit 1
]]></Implementation>
</Method>

<Method name="renderWidget">
<Description>
Allows in-line rendering of partial pages. This works rather like
a server-side include.</Description>
<Final>1</Final>
<FormalSpec>widgetName:%String="",method:%String="run",parameters:EasyCSP.Core.HashArray</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    quit:$get(widgetName)="" 0
    set:$get(parameters)'["HashArray" parameters = ##class(EasyCSP.Core.HashArray).%New()
    
    try {
        set widget = ##class(EasyCSP.Core.Component).objectFactory(widgetName, "widget", 1, parameters)
    } catch %EasyCSPException {
    }
    
    if $get(%EasyCSPException)'="" {
        set viewObj = ##class(EasyCSP.Core.Component).objectFactory("FrameworkError", "view", 1, parameters)
        do viewObj.run()
        do ..renderedPage.CopyFrom(viewObj.render())
        set %EasyCSPException = "" ; handled, no longer needed
        do ..directWrite(..renderedPage)
        quit 0
    }
        
    set methodRealName = ..findWidgetName(widget, method)
    
    if ..objectHasMethod(widget, methodRealName) {
            
        try {
            do ..renderedPage.CopyFrom($method(widget, methodRealName, parameters))
            //do $SYSTEM.OBJ.Dump(..renderedPage)
        } catch %EasyCSPException {
        set viewObj = ##class(EasyCSP.Core.Component).objectFactory("FrameworkError", "view", 1, parameters)
            do viewObj.run()
            do ..renderedPage.CopyFrom(viewObj.render())
        }
        
    } else {
        do ..renderedPage.WriteLine("Widget "_widgetName_" doesn't have method "_method_". Check case.")
    }
    
    // Emit the compiled page back to the requester
    do ..directWrite(..renderedPage)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="findWidgetName">
<FormalSpec>widget:EasyCSP.Web.Widget.Base,method:%String=""</FormalSpec>
<Language>mvbasic</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    
    methodRealName = widget->actionNameToMethod(method)
    
    if methodRealName="" then
        methodRealName = widget->actionNameToMethod(downcase(method))
    end
    
    if methodRealName="" then
        methodRealName = widget->actionNameToMethod("widget" : downcase(method))
    end
    
    return methodRealName
]]></Implementation>
</Method>

<Method name="getLayout">
<FormalSpec>layoutName:%String</FormalSpec>
<Implementation><![CDATA[
    if $get(layoutName) = "" set layoutName = ..layout
    if layoutName = 0 quit 0 // no layout has been provided.
]]></Implementation>
</Method>

<Method name="getRoute">
<Description>
Return the controller's id and the action it's undertaking. This
is useful for building URL's later in the views.</Description>
<Language>mvbasic</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    completeRoute = @ME->id : "/" : @ME->action    
    return completeRoute
]]></Implementation>
</Method>
</Class>
</Export>
