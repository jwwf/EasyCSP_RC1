<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2015.2.2 (Build 805U)" ts="2016-08-27 08:30:47">
<Class name="EasyCSP.Controller.Controllers.Group">
<Description><![CDATA[
Starting set of actions. This is the page controller called if the route is empty 
(meaning the top of the site). Login and redirection after logout are also handled here.

  <p>Copyright (c) 2011 James W "Bill" Westley-Farrell</p>

  <p>Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at</p>

      <p><a href=http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>

  <p>Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.</p>]]></Description>
<Super>EasyCSP.Controller.Base</Super>
<TimeChanged>64143,44687.117153</TimeChanged>
<TimeCreated>63460,66127.990758</TimeCreated>

<Method name="accessRules">
<Description>
The afterConstruct event will be run by the application automatically immediately
after the desired controller has been instantiated. Minimally, the access rules for
each action should be set up. That is, each user-facing view controller must set 
access rules for each action the controller will perform.

The accessRules method, if it exists, will be called automatically by the controller
base class to add access rules to the controller's environment. Specify the actions
as a comma-separated string of simple action names.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // allow any user access to help screens, the forgot password screen, the reset password screen,
    // the error display page, and the signon dialogue.
    do ..addAccessRule("indexTable,index,create,update,view", "@", "administrators")
    do ..addAccessRule("delete","", "administrators")
    
    quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
                         Actions
*/
]]></Content>
</UDLText>

<Method name="actionCreate">
<Description>
Add a new group to the system</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set model = ##class(EasyCSP.Core.Component).objectFactory("Groups", "model")
    
    if %EasyCSPApp.cgiData.get("REQUEST_METHOD") = "POST" {
    
        set id = %EasyCSPApp.requestData.get("id")
        
        do model.loadFromArray(%EasyCSPApp.requestData)
        
        do:'model.hasErrors() model.save()
        
        quit:'model.hasErrors() ..actionIndex(parameters)
        
    }
    
    // If either this is an intial GET view of the form or the model has errors after POST
    // then display the input page.
    do parameters.set("model", model)
    do parameters.set("presentation", "create")
    
    quit ..render("Form", parameters)
]]></Implementation>
</Method>

<Method name="actionDelete">
<Description>
This action is taken when an admin clicks on the secondary dialog
to deactivate a group. Users and groups in the framework user database are not
in fact deleted; they are set to inactive.</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set id = %EasyCSPApp.requestData.get("id")
    set model = ##class(EasyCSP.Core.Component).objectFactory("Groups", "model")
    do model.read(id)
    
    do model.setAttributeValue("isActive", 0)
    do model.save()
    
    quit ..render("users/index", parameters)
]]></Implementation>
</Method>

<Method name="actionIndex">
<Description>
Display the user table index page</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
    
    set model = ##class(EasyCSP.Core.Component).objectFactory("Groups", "model")
    if '..instanceOf( model, "Group") {
        throw ##class(EasyCSP.Core.Exception).%New($classname($this),"I10","","Can not obtain an instance of model Group")
        quit 0
    }
    
    do parameters.set("model", model)
    
    set queryId = %EasyCSPApp.getCGI("queryId")
    if queryId = "" {
        set queryId = $classmethod(model.%ClassName(1), "search", parameters)
    }
    
    do parameters.set("queryId", queryId)
    
    do parameters.set(%EasyCSPApp.getRequestData("pageNumber"))
    do parameters.set(%EasyCSPApp.getRequestData("pageSize"))
    
    quit ..render("QueryResult", parameters)
    
    quit 1
]]></Implementation>
</Method>

<Method name="actionUpdate">
<Description>
Update a group definition in the system</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set model = ##class(EasyCSP.Core.Component).objectFactory("Groups", "model")
    
    set id = %EasyCSPApp.requestData.get("id")
    do model.read(id)
    
    if %EasyCSPApp.cgiData.get("REQUEST_METHOD") = "POST" {
        
        if model.scenario = "new" { // no group by that id exists
            do model.addError("groupid", "No group with that ID exists. Click Cancel to return to the index.") // prevent someone screwing around with URLs
        }
        
        do model.loadFromArray(%EasyCSPApp.requestData)
        
        do:'model.hasErrors() model.save()
        
        quit:'model.hasErrors() ..actionIndex(parameters)
        
    }
    
    // If either this is an intial GET view of the form or the model has errors after POST
    // then display the input page.
    do parameters.set("model", model)
    do parameters.set("presentation", "update")
    
    quit ..render("Form", parameters)
]]></Implementation>
</Method>

<Method name="actionView">
<Description>
Drill into a group record</Description>
<FormalSpec>parameters:EasyCSP.Core.HashArray=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set:$get(parameters)="" parameters = ##class(EasyCSP.Core.HashArray).%New()
    
    set model = ##class(EasyCSP.Core.Component).objectFactory("Groups", "model")
    
    // Which group record?
    set id=""
    set:$get(parameters)["HashArray" id = parameters.get("id")
    set:id="" id = %EasyCSPApp.getRequestData("id")
    
    // Retrieve that one
    do model.read(id)
    
    // Pass data to a view through a Framework parameter structure.
    do parameters.set("model", model)
    
    // ... and render the view in its layout
    quit ..render("RecordView", parameters)
]]></Implementation>
</Method>
</Class>
</Export>
